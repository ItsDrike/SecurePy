name: Linting & Tests

on:
  push:
    branches:
      - master
  pull_request:

env:
  # Make sure pip caches dependencies and installs as user
  PIP_NO_CACHE_DIR: false
  PIP_USER: 1

  # Make sure pipenv doesn't use fancy graphics
  PIPENV_HIDE_EMOJIS: 1
  PIPENV_NOSPIN: 1

  # Make sure pipenv does not try reuse an environment it's running in
  PIPENV_IGNORE_VIRTUALENVS: 1

  # Use direct paths to allow caching
  PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
  PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-cache

jobs:
  lint:
    name: Lint & Type check
    runs-on: ubuntu-latest

    steps:
      - name: Add custom PYTHONUSERBASE to PATH
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Python setup
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Setup Node.js (for pyright)
        uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Install pyright with npm
        run: npm install -g pyright

      # Cache python dependencies
      # the key is a composite of multiple values which
      # when changed, the cache won't be restored
      # in order to make updating possible
      - name: Python Dependency Caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./Pipfile', './Pipfile.lock') }}"

      # In case dependencies weren't restored, install them
      - name: Install dependencies with pipenv
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          pip install pipenv
          pipenv install --dev --deploy --system

      # Cache pre-commit environment
      # the key consists relevant factors to allow
      # updating, when pre-commit changes
      - name: Pre-commit Environment Caching
        uses: actions/cache@v2
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: "precommit-0-${{ runner.os }}-${{ env.PRE_COMMIT_HOME }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./.pre-commit-config.yaml') }}"

      # Skip flake8 since it will have it's own section
      # make a user install for pre-commit by using
      # PIP_USER=0
      - name: Run pre-commit hooks
        run: export PIP_USER=0; SKIP=flake8 pre-commit run --all-files

      # Run flake8 formatting checks for general code style (lint) check
      # Error format:
      # ::error file={filename},line={line},col={col}::{message}
      - name: Run lint check with flake8
        run: "flake8 \
        --format='::error file=%(path)s,line=%(row)d,col=%(col)d::\
        [flake8] %(code)s: %(text)s'"

      - name: Run pyright type checking
        run: pipenv run pyright

  test:
    name: Unit-Tests check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the Unix case.
        os: [ubuntu-latest, windows-latest]
        # Run the tests on the oldest and most recent versions of Python.
        python: ['3.7', '3.9']

    steps:
      - name: Add custom PYTHONUSERBASE to PATH
        shell: bash
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Python setup
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      # Cache python dependencies
      # the key is a composite of multiple values which
      # when changed, the cache won't be restored
      # in order to make updating possible
      - name: Python Dependency Caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./Pipfile', './Pipfile.lock') }}"

      # In case dependencies weren't restored, install them
      - name: Install dependencies with pipenv
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install pipenv
          python -m pipenv install --dev --deploy --system

      - name: Run unit-tests and generate coverage report
        run: |
          python -m coverage run -m unittest
          python -m coverage report -m

      # This step will publish the coverage reports coveralls.io and
      # print a "job" link in the output of the GitHub Action
      - name: Publish coverage report to coveralls.io
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            COVERALLS_PARALLEL: true
            COVERALLS_FLAG_NAME: ${{ runner.os }}
        run: python -m coveralls

  coveralls:
    name: Finish Coveralls
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Python setup
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Cache python dependencies
      # the key is a composite of multiple values which
      # when changed, the cache won't be restored
      # in order to make updating possible
      - name: Python Dependency Caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./Pipfile', './Pipfile.lock') }}"

      # In case dependencies weren't restored, install them
      - name: Install dependencies with pipenv
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install pipenv
          python -m pipenv install --dev --deploy --system

      - name: Finish publishing to coveralls.io
        run: python -m coveralls --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

